# Increase timeouts to make the Daimler VPN experience bearable
build                       --experimental_scale_timeouts=100
                
# Set our custom-configured cross compiling toolchain
build:aarch64_linux_ubuntu  --crosstool_top=//bazel/toolchains/aarch64_linux_ubuntu_compiler:toolchain --host_crosstool_top=@bazel_tools//tools/cpp:toolchain
build:aarch64_linux_linaro  --crosstool_top=//bazel/toolchains/aarch64_linux_linaro_compiler:toolchain --host_crosstool_top=@bazel_tools//tools/cpp:toolchain
build:x86_64_qnx            --crosstool_top=//bazel/toolchains/qnx_compiler:toolchain --host_crosstool_top=@bazel_tools//tools/cpp:toolchain
build:aarch64_qnx           --crosstool_top=//bazel/toolchains/qnx_compiler:toolchain --host_crosstool_top=@bazel_tools//tools/cpp:toolchain

# Choose target configuration explicitly
build:x86_64_linux          --//:os="linux"
build:aarch64_linux_ubuntu  --//:os="linux"
build:aarch64_linux_linaro  --//:os="linux"
build:x86_64_qnx            --//:os="qnx"
build:aarch64_qnx           --//:os="qnx"

# Specify target architecture
build:x86_64_linux          --cpu=k8
build:aarch64_linux_ubuntu  --cpu=aarch64
build:aarch64_linux_linaro  --cpu=aarch64
build:x86_64_qnx            --cpu=k8
build:aarch64_qnx           --cpu=aarch64

# This is needed for both Bazel toolchain configuration and for Bazel-native compilation to work
build:x86_64_qnx            --action_env=QNX_HOST --action_env=QNX_TARGET
build:aarch64_qnx           --action_env=QNX_HOST --action_env=QNX_TARGET

# this configuration option is used for remote caching on CI
# the path after keyword '--disk_cache="' is extracted in Jenkinsfile and used as efs cache mount volume inside docker
# container because of which it is not recommended to use '--disk_cache="' keyword for any other purpose
build:use_efs_build_cache   --disk_cache="/home/jenkins_agent/efs_cache/mpu"

# Temporary workaround for not having features implemented for the x86_64_linux crosstool toolchain. We used to have
# this like this and moved it in the toolchain file, but because we don't have a toolchain fuile for this platform
# yet, we are adding it here. In the future we need to add a toolchain for this file and handle this via toolchain
# features, like in the current toolchain files.
build:x86_64_linux          --linkopt="-lpthread" --linkopt="-Wl,--gc-sections" --copt="-ffunction-sections -fdata-sections -fPIC"

# Temporary workaround until MR 309 progresses.
build:stripped              --linkopt="-Wl,--strip-all"
