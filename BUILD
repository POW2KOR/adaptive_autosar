load("@rules_cc//cc:defs.bzl", "cc_binary", "cc_library")
load("@bazel_skylib//rules:common_settings.bzl", "string_flag")

package(default_visibility = ["//visibility:public"])


string_flag(name = "build-target", build_setting_default = "minerva-host")

config_setting(
    name = "minerva-host",
    flag_values = {
        ":build-target": "minerva-host",
    },
)

config_setting(
    name = "minerva-drive-sdk",
    flag_values = {
        ":build-target": "minerva-drive-sdk",
    },
)

config_setting(
    name = "minerva-target",
    flag_values = {
        ":build-target": "minerva-target",
    },
)

BINARY_SOURCES = select({
    ":minerva-host" : [

        "//application/mbition-app-prototype:src/main.cc",
        "//application/mbition-app-prototype:src/config/logging_cfg.h",

        # It is important that code-gen goes after the libARA because of dependencies of libARA
        # on runtime_init.cpp that is generated by the Vector tools.  It is also important,
        # that ':mbition_use_case_1' goes before the code-gen.
        "//application/mbition-app-prototype:mbition_use_case_1",
        # We were unable to simply use ':amsr-vector-fs-communicationmiddleware' because
        # of runtime Java exceptions in Bazel. We didn't investigate why it happens.
        "bazel-out/k8-fastbuild/bin/external/vector_sip_aa/amsr-vector-fs-communicationmiddleware/lib/libARA.a",
        "@vector_sip_aa//:mbition_app_prototype_src_gen",
    ],
    ":minerva-target" : [

        "//application/mbition-app-prototype:src/main.cc",
        "//application/mbition-app-prototype:src/config/logging_cfg.h",

        # It is important that code-gen goes after the libARA because of dependencies of libARA
        # on runtime_init.cpp that is generated by the Vector tools.  It is also important,
        # that ':mbition_use_case_1' goes before the code-gen.
        "//application/mbition-app-prototype:mbition_use_case_1",
        # We were unable to simply use ':amsr-vector-fs-communicationmiddleware' because
        # of runtime Java exceptions in Bazel. We didn't investigate why it happens.
        "bazel-out/aarch64-fastbuild/bin/external/vector_sip_aa/amsr-vector-fs-communicationmiddleware/lib/libARA.a",
        "@vector_sip_aa//:mbition_app_prototype_src_gen",
    ],
})

cc_binary(
    name = "mbition_app_prototype",
    srcs = BINARY_SOURCES,
    copts = [
        "-std=c++14",
    ],
    defines = [
        "SOMEIPD_CONFIG_DIR='opt/someipd_posix/etc'",
        "MBITION_USE_CASE_1",
    ],
    linkstatic = 1,
    deps = [
        "//application/mbition-app-prototype:mbition_use_case_1",
        "//application/mbition-app-prototype:command_line_parser",
        "@vector_sip_aa//:amsr-vector-fs-log-api",
        "@vector_sip_aa//:amsr-vector-fs-libosabstraction",
        "@vector_sip_aa//:amsr-vector-fs-communicationmiddleware",
        "@vector_sip_aa//:amsr-vector-fs-comcommon",        
        "@vector_sip_aa//:amsr-vector-fs-sec-libseccom",
    ],
)