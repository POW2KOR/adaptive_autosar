"""
This file contains several utility functions and macros used within or with the
Adaptive AUTOSAR BSW Bazel files.
"""

def extend_and_select(select_dict, extension):
    """
    Take a select dict, extend each option with another value and then select

    This function takes in a dictionary in the format required for the select
    Bazel function. It then extends each of the options of the dictionary with
    a given extension value. Finally, it does a select and returns it as the
    final output.

    Args:
        select_dict: The dictionary in format.

        extension: The value to use to extend each of the select options.
    """
    for _, value in select_dict.items():
        value.update(extension)

    return select(select_dict)

def minerva_aa_codegen_declare(name, path_to_generators, generators):
    """
    A wrapper around native filegroup for Adaptive AUTOSAR code generators.

    This macro is a wrapper around the native filegroup rule with the
    appropriate configuration so that it can be used in genrule tools field
    later on.

    Args:
        name: This name is used as a prefix for the tool targets.

        path_to_generators: Filesystem path to the generators folder.

        generators: List of generators to build tool targets for.
    """
    for generator in generators:
        # Unfortunately since rule macros only run the analysis phase, we can't
        # do extra filesystem checks to see if the requested generators exist
        # on the filesystem or other nice things like this.
        native.filegroup(
            name = "{}_{}".format(name, generator),
            srcs = [
                "{}/{}".format(path_to_generators, generator),
            ],
            visibility = ["//visibility:public"],
        )


def minerva_aa_codegen_rule(name, arxml_srcs, outs, generators):
    """
    A wrapper around the native genrule for Adaptive AUTOSAR code generation.

    This macro is a wrapper around the native genrule with the appropriate
    configuration and script to generate code using the Vector Adaptive AUTOSAR
    code generators.

    Args:
        name: A unique name for this target.

            You may refer to this rule by name in the srcs or deps section of
            other BUILD rules. If the rule generates source files, you should
            use the srcs attribute.

        arxml_srcs:  A list of inputs for code generation. Expected to be ARXML
            source files.

        outs: A list of files generated by this rule.  Output files must not
            cross package boundaries. Output filenames are interpreted as
            relative to the package.

        generators: A list of code generator dependencies for this rule.
    """

    tools_list = [
        "@starter_kit_adaptive_xavier//:generator_common_tools",
        "@starter_kit_adaptive_xavier//:amsrgen_sh",
        "@starter_kit_adaptive_xavier//:setup_jre_link_sh",
    ]

    generators_arg_list = []

    for generator in generators:
        tools_list.append(generator)
        generators_arg_list.append("-g $(locations {})".format(generator))

    arxml_srcs_arg_list = []

    for arxml_src in arxml_srcs:
        arxml_srcs_arg_list.append("$(locations {})".format(arxml_src))

    native.genrule(
        name = name,
        srcs = arxml_srcs,
        outs = outs,
        cmd = """
        mkdir -p $(RULEDIR)/src_gen
        mkdir -p $(RULEDIR)/arxml_folder
        cp {arxml_srcs} $(RULEDIR)/arxml_folder

        $(location @starter_kit_adaptive_xavier//:amsrgen_sh) -v \
        {generators_arg} \
        -x $(RULEDIR)/arxml_folder -o $(RULEDIR)/src_gen --saveProject > /dev/null
        """.format(
            generators_arg = " ".join(generators_arg_list),
            arxml_srcs = " ".join(arxml_srcs_arg_list)
        ),
        tools = tools_list
    )